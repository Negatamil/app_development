{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport notificationAPI from '../../services/api/notificationAPI';\n\n// Async thunks\nexport const fetchNotifications = createAsyncThunk('notifications/fetchNotifications', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await notificationAPI.getAllNotifications();\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch notifications');\n  }\n});\nexport const markNotificationAsRead = createAsyncThunk('notifications/markAsRead', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await notificationAPI.markAsRead(id);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to mark notification as read');\n  }\n});\nexport const deleteNotification = createAsyncThunk('notifications/deleteNotification', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    await notificationAPI.deleteNotification(id);\n    return id;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to delete notification');\n  }\n});\nconst initialState = {\n  notifications: [],\n  unreadCount: 0,\n  loading: false,\n  error: null\n};\nconst notificationSlice = createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    addNotification: (state, action) => {\n      state.notifications.unshift(action.payload);\n      if (!action.payload.isRead) {\n        state.unreadCount += 1;\n      }\n    },\n    markAsRead: (state, action) => {\n      const notification = state.notifications.find(n => n.id === action.payload);\n      if (notification && !notification.isRead) {\n        notification.isRead = true;\n        state.unreadCount -= 1;\n      }\n    },\n    clearAllNotifications: state => {\n      state.notifications = [];\n      state.unreadCount = 0;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch notifications\n    .addCase(fetchNotifications.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchNotifications.fulfilled, (state, action) => {\n      state.loading = false;\n      state.notifications = action.payload;\n      state.unreadCount = action.payload.filter(n => !n.isRead).length;\n      state.error = null;\n    }).addCase(fetchNotifications.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Mark notification as read\n    .addCase(markNotificationAsRead.fulfilled, (state, action) => {\n      const notification = state.notifications.find(n => n.id === action.payload.id);\n      if (notification && !notification.isRead) {\n        notification.isRead = true;\n        state.unreadCount -= 1;\n      }\n    })\n\n    // Delete notification\n    .addCase(deleteNotification.fulfilled, (state, action) => {\n      const notification = state.notifications.find(n => n.id === action.payload);\n      if (notification && !notification.isRead) {\n        state.unreadCount -= 1;\n      }\n      state.notifications = state.notifications.filter(n => n.id !== action.payload);\n    });\n  }\n});\nexport const {\n  clearError,\n  addNotification,\n  markAsRead,\n  clearAllNotifications\n} = notificationSlice.actions;\nexport default notificationSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","notificationAPI","fetchNotifications","_","rejectWithValue","response","getAllNotifications","data","error","_error$response","_error$response$data","message","markNotificationAsRead","id","markAsRead","_error$response2","_error$response2$data","deleteNotification","_error$response3","_error$response3$data","initialState","notifications","unreadCount","loading","notificationSlice","name","reducers","clearError","state","addNotification","action","unshift","payload","isRead","notification","find","n","clearAllNotifications","extraReducers","builder","addCase","pending","fulfilled","filter","length","rejected","actions","reducer"],"sources":["C:/Users/HomePC/Desktop/parkingg/src/store/slices/notificationSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport notificationAPI from '../../services/api/notificationAPI';\r\n\r\n// Async thunks\r\nexport const fetchNotifications = createAsyncThunk(\r\n  'notifications/fetchNotifications',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await notificationAPI.getAllNotifications();\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.message || 'Failed to fetch notifications');\r\n    }\r\n  }\r\n);\r\n\r\nexport const markNotificationAsRead = createAsyncThunk(\r\n  'notifications/markAsRead',\r\n  async (id, { rejectWithValue }) => {\r\n    try {\r\n      const response = await notificationAPI.markAsRead(id);\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.message || 'Failed to mark notification as read');\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteNotification = createAsyncThunk(\r\n  'notifications/deleteNotification',\r\n  async (id, { rejectWithValue }) => {\r\n    try {\r\n      await notificationAPI.deleteNotification(id);\r\n      return id;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data?.message || 'Failed to delete notification');\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  notifications: [],\r\n  unreadCount: 0,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst notificationSlice = createSlice({\r\n  name: 'notifications',\r\n  initialState,\r\n  reducers: {\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n    addNotification: (state, action) => {\r\n      state.notifications.unshift(action.payload);\r\n      if (!action.payload.isRead) {\r\n        state.unreadCount += 1;\r\n      }\r\n    },\r\n    markAsRead: (state, action) => {\r\n      const notification = state.notifications.find(n => n.id === action.payload);\r\n      if (notification && !notification.isRead) {\r\n        notification.isRead = true;\r\n        state.unreadCount -= 1;\r\n      }\r\n    },\r\n    clearAllNotifications: (state) => {\r\n      state.notifications = [];\r\n      state.unreadCount = 0;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch notifications\r\n      .addCase(fetchNotifications.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchNotifications.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.notifications = action.payload;\r\n        state.unreadCount = action.payload.filter(n => !n.isRead).length;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchNotifications.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      \r\n      // Mark notification as read\r\n      .addCase(markNotificationAsRead.fulfilled, (state, action) => {\r\n        const notification = state.notifications.find(n => n.id === action.payload.id);\r\n        if (notification && !notification.isRead) {\r\n          notification.isRead = true;\r\n          state.unreadCount -= 1;\r\n        }\r\n      })\r\n      \r\n      // Delete notification\r\n      .addCase(deleteNotification.fulfilled, (state, action) => {\r\n        const notification = state.notifications.find(n => n.id === action.payload);\r\n        if (notification && !notification.isRead) {\r\n          state.unreadCount -= 1;\r\n        }\r\n        state.notifications = state.notifications.filter(n => n.id !== action.payload);\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clearError, addNotification, markAsRead, clearAllNotifications } = notificationSlice.actions;\r\nexport default notificationSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}