{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport webSocketService from '../services/websocket';\nimport { useDispatch } from 'react-redux';\nimport { updateSlotAvailability } from '../store/slices/slotSlice';\nimport { addNotification } from '../store/slices/notificationSlice';\nexport const useWebSocket = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    token,\n    user\n  } = useSelector(state => state.auth);\n  const isConnectedRef = useRef(false);\n  const connect = useCallback(() => {\n    if (token && !isConnectedRef.current) {\n      webSocketService.connect(token);\n      isConnectedRef.current = true;\n    }\n  }, [token]);\n  const disconnect = useCallback(() => {\n    if (isConnectedRef.current) {\n      webSocketService.disconnect();\n      isConnectedRef.current = false;\n    }\n  }, []);\n  useEffect(() => {\n    // Connect when token is available\n    if (token) {\n      connect();\n    } else {\n      disconnect();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      disconnect();\n    };\n  }, [token, connect, disconnect]);\n\n  // Handle connection status\n  useEffect(() => {\n    const handleConnectionStatus = data => {\n      console.log('WebSocket connection status:', data);\n    };\n    const handleConnectionError = error => {\n      console.error('WebSocket connection error:', error);\n    };\n    webSocketService.on('connection-status', handleConnectionStatus);\n    webSocketService.on('connection-error', handleConnectionError);\n    return () => {\n      webSocketService.off('connection-status', handleConnectionStatus);\n      webSocketService.off('connection-error', handleConnectionError);\n    };\n  }, []);\n\n  // Handle slot updates\n  useEffect(() => {\n    const handleSlotUpdate = data => {\n      console.log('Received slot update:', data);\n      if (data.slotId && data.isAvailable !== undefined) {\n        dispatch(updateSlotAvailability({\n          slotId: data.slotId,\n          isAvailable: data.isAvailable\n        }));\n      }\n    };\n    webSocketService.on('slot-update', handleSlotUpdate);\n    return () => {\n      webSocketService.off('slot-update', handleSlotUpdate);\n    };\n  }, [dispatch]);\n\n  // Handle notifications\n  useEffect(() => {\n    const handleNotification = notification => {\n      console.log('Received notification:', notification);\n      dispatch(addNotification(notification));\n    };\n    webSocketService.on('notification', handleNotification);\n    return () => {\n      webSocketService.off('notification', handleNotification);\n    };\n  }, [dispatch]);\n  return {\n    isConnected: isConnectedRef.current,\n    connect,\n    disconnect,\n    emit: webSocketService.emitToServer.bind(webSocketService),\n    on: webSocketService.on.bind(webSocketService),\n    off: webSocketService.off.bind(webSocketService),\n    subscribeToSlotUpdates: webSocketService.subscribeToSlotUpdates.bind(webSocketService),\n    unsubscribeFromSlotUpdates: webSocketService.unsubscribeFromSlotUpdates.bind(webSocketService),\n    subscribeToUserUpdates: webSocketService.subscribeToUserUpdates.bind(webSocketService),\n    unsubscribeFromUserUpdates: webSocketService.unsubscribeFromUserUpdates.bind(webSocketService)\n  };\n};\n_s(useWebSocket, \"8mH6hA3w+jsX98GWYhd5YXWJCn8=\", false, function () {\n  return [useDispatch, useSelector];\n});\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useCallback","useSelector","webSocketService","useDispatch","updateSlotAvailability","addNotification","useWebSocket","_s","dispatch","token","user","state","auth","isConnectedRef","connect","current","disconnect","handleConnectionStatus","data","console","log","handleConnectionError","error","on","off","handleSlotUpdate","slotId","isAvailable","undefined","handleNotification","notification","isConnected","emit","emitToServer","bind","subscribeToSlotUpdates","unsubscribeFromSlotUpdates","subscribeToUserUpdates","unsubscribeFromUserUpdates"],"sources":["C:/Users/HomePC/Desktop/parkingg/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useCallback } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport webSocketService from '../services/websocket';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateSlotAvailability } from '../store/slices/slotSlice';\r\nimport { addNotification } from '../store/slices/notificationSlice';\r\n\r\nexport const useWebSocket = () => {\r\n  const dispatch = useDispatch();\r\n  const { token, user } = useSelector((state) => state.auth);\r\n  const isConnectedRef = useRef(false);\r\n\r\n  const connect = useCallback(() => {\r\n    if (token && !isConnectedRef.current) {\r\n      webSocketService.connect(token);\r\n      isConnectedRef.current = true;\r\n    }\r\n  }, [token]);\r\n\r\n  const disconnect = useCallback(() => {\r\n    if (isConnectedRef.current) {\r\n      webSocketService.disconnect();\r\n      isConnectedRef.current = false;\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Connect when token is available\r\n    if (token) {\r\n      connect();\r\n    } else {\r\n      disconnect();\r\n    }\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [token, connect, disconnect]);\r\n\r\n  // Handle connection status\r\n  useEffect(() => {\r\n    const handleConnectionStatus = (data) => {\r\n      console.log('WebSocket connection status:', data);\r\n    };\r\n\r\n    const handleConnectionError = (error) => {\r\n      console.error('WebSocket connection error:', error);\r\n    };\r\n\r\n    webSocketService.on('connection-status', handleConnectionStatus);\r\n    webSocketService.on('connection-error', handleConnectionError);\r\n\r\n    return () => {\r\n      webSocketService.off('connection-status', handleConnectionStatus);\r\n      webSocketService.off('connection-error', handleConnectionError);\r\n    };\r\n  }, []);\r\n\r\n  // Handle slot updates\r\n  useEffect(() => {\r\n    const handleSlotUpdate = (data) => {\r\n      console.log('Received slot update:', data);\r\n      if (data.slotId && data.isAvailable !== undefined) {\r\n        dispatch(updateSlotAvailability({\r\n          slotId: data.slotId,\r\n          isAvailable: data.isAvailable\r\n        }));\r\n      }\r\n    };\r\n\r\n    webSocketService.on('slot-update', handleSlotUpdate);\r\n\r\n    return () => {\r\n      webSocketService.off('slot-update', handleSlotUpdate);\r\n    };\r\n  }, [dispatch]);\r\n\r\n  // Handle notifications\r\n  useEffect(() => {\r\n    const handleNotification = (notification) => {\r\n      console.log('Received notification:', notification);\r\n      dispatch(addNotification(notification));\r\n    };\r\n\r\n    webSocketService.on('notification', handleNotification);\r\n\r\n    return () => {\r\n      webSocketService.off('notification', handleNotification);\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return {\r\n    isConnected: isConnectedRef.current,\r\n    connect,\r\n    disconnect,\r\n    emit: webSocketService.emitToServer.bind(webSocketService),\r\n    on: webSocketService.on.bind(webSocketService),\r\n    off: webSocketService.off.bind(webSocketService),\r\n    subscribeToSlotUpdates: webSocketService.subscribeToSlotUpdates.bind(webSocketService),\r\n    unsubscribeFromSlotUpdates: webSocketService.unsubscribeFromSlotUpdates.bind(webSocketService),\r\n    subscribeToUserUpdates: webSocketService.subscribeToUserUpdates.bind(webSocketService),\r\n    unsubscribeFromUserUpdates: webSocketService.unsubscribeFromUserUpdates.bind(webSocketService),\r\n  };\r\n};\r\n\r\nexport default useWebSocket;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}