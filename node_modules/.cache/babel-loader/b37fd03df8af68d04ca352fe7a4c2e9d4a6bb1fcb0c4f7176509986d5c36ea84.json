{"ast":null,"code":"import { io } from 'socket.io-client';\nclass WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.listeners = new Map();\n  }\n  connect(token) {\n    if (this.socket && this.isConnected) {\n      return this.socket;\n    }\n    const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8080';\n    this.socket = io(wsUrl, {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling']\n    });\n    this.socket.on('connect', () => {\n      console.log('WebSocket connected');\n      this.isConnected = true;\n      this.emit('connection-status', {\n        connected: true\n      });\n    });\n    this.socket.on('disconnect', () => {\n      console.log('WebSocket disconnected');\n      this.isConnected = false;\n      this.emit('connection-status', {\n        connected: false\n      });\n    });\n    this.socket.on('connect_error', error => {\n      console.error('WebSocket connection error:', error);\n      this.isConnected = false;\n      this.emit('connection-error', error);\n    });\n\n    // Handle slot updates\n    this.socket.on('slot-update', data => {\n      console.log('Slot update received:', data);\n      this.emit('slot-update', data);\n    });\n\n    // Handle booking updates\n    this.socket.on('booking-update', data => {\n      console.log('Booking update received:', data);\n      this.emit('booking-update', data);\n    });\n\n    // Handle notifications\n    this.socket.on('notification', data => {\n      console.log('Notification received:', data);\n      this.emit('notification', data);\n    });\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  // Event emitter functionality\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  // Socket.io specific methods\n  emitToServer(event, data) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit(event, data);\n    } else {\n      console.warn('Socket not connected, cannot emit event:', event);\n    }\n  }\n\n  // Join room for specific updates\n  joinRoom(roomName) {\n    this.emitToServer('join-room', roomName);\n  }\n  leaveRoom(roomName) {\n    this.emitToServer('leave-room', roomName);\n  }\n\n  // Specific methods for parking system\n  subscribeToSlotUpdates(facilityId) {\n    this.joinRoom(`facility-${facilityId}`);\n  }\n  unsubscribeFromSlotUpdates(facilityId) {\n    this.leaveRoom(`facility-${facilityId}`);\n  }\n  subscribeToUserUpdates(userId) {\n    this.joinRoom(`user-${userId}`);\n  }\n  unsubscribeFromUserUpdates(userId) {\n    this.leaveRoom(`user-${userId}`);\n  }\n\n  // Request real-time data\n  requestSlotUpdates(facilityId) {\n    this.emitToServer('request-slot-updates', {\n      facilityId\n    });\n  }\n  requestBookingUpdates(userId) {\n    this.emitToServer('request-booking-updates', {\n      userId\n    });\n  }\n}\n\n// Create singleton instance\nconst webSocketService = new WebSocketService();\nexport default webSocketService;","map":{"version":3,"names":["io","WebSocketService","constructor","socket","isConnected","listeners","Map","connect","token","wsUrl","process","env","REACT_APP_WS_URL","auth","transports","on","console","log","emit","connected","error","data","disconnect","event","callback","has","set","get","push","off","callbacks","index","indexOf","splice","forEach","emitToServer","warn","joinRoom","roomName","leaveRoom","subscribeToSlotUpdates","facilityId","unsubscribeFromSlotUpdates","subscribeToUserUpdates","userId","unsubscribeFromUserUpdates","requestSlotUpdates","requestBookingUpdates","webSocketService"],"sources":["C:/Users/HomePC/Desktop/parkingg/src/services/websocket.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nclass WebSocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n    this.listeners = new Map();\r\n  }\r\n\r\n  connect(token) {\r\n    if (this.socket && this.isConnected) {\r\n      return this.socket;\r\n    }\r\n\r\n    const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8080';\r\n    \r\n    this.socket = io(wsUrl, {\r\n      auth: {\r\n        token: token\r\n      },\r\n      transports: ['websocket', 'polling']\r\n    });\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('WebSocket connected');\r\n      this.isConnected = true;\r\n      this.emit('connection-status', { connected: true });\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('WebSocket disconnected');\r\n      this.isConnected = false;\r\n      this.emit('connection-status', { connected: false });\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('WebSocket connection error:', error);\r\n      this.isConnected = false;\r\n      this.emit('connection-error', error);\r\n    });\r\n\r\n    // Handle slot updates\r\n    this.socket.on('slot-update', (data) => {\r\n      console.log('Slot update received:', data);\r\n      this.emit('slot-update', data);\r\n    });\r\n\r\n    // Handle booking updates\r\n    this.socket.on('booking-update', (data) => {\r\n      console.log('Booking update received:', data);\r\n      this.emit('booking-update', data);\r\n    });\r\n\r\n    // Handle notifications\r\n    this.socket.on('notification', (data) => {\r\n      console.log('Notification received:', data);\r\n      this.emit('notification', data);\r\n    });\r\n\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n\r\n  // Event emitter functionality\r\n  on(event, callback) {\r\n    if (!this.listeners.has(event)) {\r\n      this.listeners.set(event, []);\r\n    }\r\n    this.listeners.get(event).push(callback);\r\n  }\r\n\r\n  off(event, callback) {\r\n    if (this.listeners.has(event)) {\r\n      const callbacks = this.listeners.get(event);\r\n      const index = callbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        callbacks.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  emit(event, data) {\r\n    if (this.listeners.has(event)) {\r\n      this.listeners.get(event).forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error(`Error in event listener for ${event}:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Socket.io specific methods\r\n  emitToServer(event, data) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit(event, data);\r\n    } else {\r\n      console.warn('Socket not connected, cannot emit event:', event);\r\n    }\r\n  }\r\n\r\n  // Join room for specific updates\r\n  joinRoom(roomName) {\r\n    this.emitToServer('join-room', roomName);\r\n  }\r\n\r\n  leaveRoom(roomName) {\r\n    this.emitToServer('leave-room', roomName);\r\n  }\r\n\r\n  // Specific methods for parking system\r\n  subscribeToSlotUpdates(facilityId) {\r\n    this.joinRoom(`facility-${facilityId}`);\r\n  }\r\n\r\n  unsubscribeFromSlotUpdates(facilityId) {\r\n    this.leaveRoom(`facility-${facilityId}`);\r\n  }\r\n\r\n  subscribeToUserUpdates(userId) {\r\n    this.joinRoom(`user-${userId}`);\r\n  }\r\n\r\n  unsubscribeFromUserUpdates(userId) {\r\n    this.leaveRoom(`user-${userId}`);\r\n  }\r\n\r\n  // Request real-time data\r\n  requestSlotUpdates(facilityId) {\r\n    this.emitToServer('request-slot-updates', { facilityId });\r\n  }\r\n\r\n  requestBookingUpdates(userId) {\r\n    this.emitToServer('request-booking-updates', { userId });\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst webSocketService = new WebSocketService();\r\n\r\nexport default webSocketService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}